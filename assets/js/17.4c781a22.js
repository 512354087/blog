(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{653:function(s,n,e){"use strict";e.r(n);var a=e(76),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("##前言")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  主要总结一下在项目中遇到过花了时间解决的问题 以使用场景为例\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"react-createportal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-createportal"}},[s._v("#")]),s._v(" React createPortal")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("Portal 提供了一种将子节点渲染到存在于父组件以外 DOM 节点的方案。")])]),s._v(" "),n("li",[n("p",[s._v("Portal 实战案例")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" <Route\n  path={}\n  render={()=> ReactDom.createPortal(departmentVisible ? (<CustomerCompontent  ...props />) : null, document.body) }\n />\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"forwardref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#forwardref"}},[s._v("#")]),s._v(" forwardRef")]),s._v(" "),n("ul",[n("li",[s._v("转发引入 Ref\n这个场景实际很简单，比如父组件想获取孙组件，某一个 dom 元素。这种隔代 ref 获取引用，就需要 forwardRef 来助力。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Son (props){\n    const { grandRef } = props\n    return <div>\n        <div> i am alien </div>\n        <span ref={grandRef} >这个是想要获取元素</span>\n    </div>\n}\n\nclass Father extends React.Component{\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return <div>\n            <Son grandRef={this.props.grandRef}  />\n        </div>\n    }\n}\n\nconst NewFather = React.forwardRef((props,ref)=><Father grandRef={ref}  {...props} />  )\n\nclass GrandFather extends React.Component{\n    constructor(props){\n        super(props)\n    }\n    node = null\n    componentDidMount(){\n        console.log(this.node)\n    }\n    render(){\n        return <div>\n            <NewFather ref={(node)=> this.node = node } />\n        </div>\n    }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br")])]),n("ul",[n("li",[s._v("高阶组件转发 Ref")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("unction HOC(Component){\n  class Wrap extends React.Component{\n     render(){\n        const { forwardedRef ,...otherprops  } = this.props\n        return <Component ref={forwardedRef}  {...otherprops}  />\n     }\n  }\n  return  React.forwardRef((props,ref)=> <Wrap forwardedRef={ref} {...props} /> )\n}\nclass Index extends React.Component{\n  componentDidMount(){\n      console.log(666)\n  }\n  render(){\n    return <div>hello,world</div>\n  }\n}\nconst HocIndex =  HOC(Index,true)\nexport default ()=>{\n  const node = useRef(null)\n  useEffect(()=>{\n     /* 就可以跨层级，捕获到 Index 组件的实例了 */\n    console.log(node.current.componentDidMount)\n  },[])\n  return <div><HocIndex ref={node}  /></div>\n}\n\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("h2",{attrs:{id:"useeffect-和-uselayouteffect-区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#useeffect-和-uselayouteffect-区别"}},[s._v("#")]),s._v(" useEffect 和 useLayoutEffect 区别")]),s._v(" "),n("p",[s._v("useEffect\n基本上 90%的情况下,都应该用这个,这个是在 render 结束后,你的 callback 函数执行,但是不会 block browser painting,算是某种异步的方式吧,但是 class 的 componentDidMount 和 componentDidUpdate 是同步的,在 render 结束后就运行,useEffect 在大部分场景下都比 class 的方式性能更好.")]),s._v(" "),n("p",[s._v("useLayoutEffect\n这个是用在处理 DOM 的时候,当你的 useEffect 里面的操作需要处理 DOM,并且会改变页面的样式,就需要用这个,否则可能会出现出现闪屏问题, useLayoutEffect 里面的 callback 函数会在 DOM 更新完成后立即执行,但是会在浏览器进行任何绘制之前运行完成,阻塞了浏览器的绘制.")]),s._v(" "),n("h2",{attrs:{id:"setstate-回调"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setstate-回调"}},[s._v("#")]),s._v(" setState 回调")]),s._v(" "),n("p",[s._v("** 我们在 setState 的时候，通过回调，可以取到正确的 count 值。")]),s._v(" "),n("h2",{attrs:{id:"useeffect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[s._v("#")]),s._v(" useEffect")]),s._v(" "),n("p",[s._v("使用 useEffect 完成副作用操作，补齐了 React 的 watch 能力，如果 deps 为空数组，那么就等效 class 组件里的 didComponentMount 生命周期。 useEffect 接收的返回值是函数，等效 class 组件的 componentWillUnmount 生命周期钩子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("useEffect(() => {\n  // didComponentMount\n  // do sth...\n  return () => {\n    // componentWillUnmount\n    // do sth...\n  };\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"react-中-usestate-优雅的回调"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-中-usestate-优雅的回调"}},[s._v("#")]),s._v(" React 中 useState 优雅的回调")]),s._v(" "),n("p",[s._v("setState 里面再次使用 setState\n为什么要讲这个，因为这里会出现一些小问题。")]),s._v(" "),n("p",[s._v("经过测试，结果如下所示，为什么第三种是错误的，我也不清楚，希望有大佬可以帮我解释一下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const [count1, setCount1] = React.useState(0);\nconst [count2, setCount2] = React.useState(0);\nsetCount1(num => {\n    setCount2(num + 1);// 正确\n    // setCount2(() => num + 1); // 正确\n    // setCount2(num => num + 1); // 错误\n    return num + 1;\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("使用 Promise 改良")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const [count1, setCount1] = React.useState(0);\nconst [count2, setCount2] = React.useState(0);\nnew Promise((resolve) => {\n    setCount1((num) => {\n        resolve(num + 1);\n        return num + 1;\n    });\n}).then(res => {\n    seyCount2(res);\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"常见场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见场景"}},[s._v("#")]),s._v(" 常见场景")]),s._v(" "),n("ul",[n("li",[s._v("多表单提交")]),s._v(" "),n("li",[s._v("form.item dependencies 联动")])])])}),[],!1,null,null,null);n.default=t.exports}}]);