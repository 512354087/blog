(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{692:function(s,e,n){"use strict";n.r(e);var a=n(76),t=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("  typescript 用法拓展\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"从-javascript-迁移"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从-javascript-迁移"}},[s._v("#")]),s._v(" 从 JavaScript 迁移")]),s._v(" "),e("ol",[e("li",[s._v("添加一个 tsconfig.json 文件；")]),s._v(" "),e("li",[s._v("把文件扩展名从 .js 改成 .ts，开始使用 any 来减少错误；")]),s._v(" "),e("li",[s._v("开始在 TypeScript 中写代码，尽可能的减少 any 的使用；")]),s._v(" "),e("li",[s._v("回到旧代码，开始添加类型注解，并修复已识别的错误；")]),s._v(" "),e("li",[s._v("为第三方 JavaScript 代码定义环境声明。")])]),s._v(" "),e("ul",[e("li",[s._v("第三方代码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("你可以将你的 JavaScript 代码改成 TypeScript 代码，但是你不能让整个世界都使用 TypeScript。这正是 TypeScript 环境声明支持的地方。我建议你以创建一个 vendor.d.ts 文件作为开始（.d.ts 文件扩展名指定这个文件是一个声明文件），然后我向文件里添加东西。或者，你也可以创建一个针对于特定库的声明文件，如为 jquery 创建 jquery.d.ts 文件。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("根据 jquery 的使用，你可以非常简单快速的为它创建一个定义")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("declare var $: any;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("有时，你可能想在某些内容（如 jQuery）上添加显式的注解，并且你会在类型声明空间中使用它。你可以通过 type 关键字快速的实现它：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("declare type JQuery = any;\ndeclare var $: JQuery;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("第三方的 NPM 模块")])]),s._v(" "),e("p",[s._v("与全局变量声明相似，你可以快速的定义一个全局模块，如：对于 jquery，如果你想把它作为一个模块来使用（NPM），可以自己通过以下方式实现：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("declare module 'jquery';\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("然后你就可以在必要时导入它：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import * as $ from 'jquery';\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("额外的非 JavaScript 资源")])]),s._v(" "),e("p",[s._v("在 TypeScript 中，甚至可以允许你导入任何文件，例如 .css 文件（如果你使用的是 webpack 样式加载器或 css 模块），你只要添加如下代码（放在 global.d.ts）：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("declare module '*.css';\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("现在你可以使用 import * as foo from './some/file.css'。")]),s._v(" "),e("p",[s._v("与此相似，如果你想使用 html 模版（例如：angular），你可以：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("declare module '*.html';\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"keyof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keyof"}},[s._v("#")]),s._v(" keyof")]),s._v(" "),e("p",[s._v("keyof 与 Object.keys 略有相似，只不过 keyof 取 interface 的键")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('interface Point {\n    x: number;\n    y: number;\n}\n\n// type keys = "x" | "y"\ntype keys = keyof Point;\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("假设有一个 object 如下所示，我们需要使用 typescript 实现一个 get 函数来获取它的属性值")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const data = {\n  a: 3,\n  hello: 'world'\n}\n\nfunction get(o: object, name: string) {\n  return o[name]\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("我们刚开始可能会这么写，不过它有很多缺点")]),s._v(" "),e("ul",[e("li",[s._v("无法确认返回类型：这将损失 ts 最大的类型校验功能\n无法对 key 做约束：可能会犯拼写错误的问题")]),s._v(" "),e("li",[s._v("这时可以使用 keyof 来加强 get 函数的类型功能，有兴趣的同学可以看看 _.get 的 type 标记以及实现")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function get<T extends object, K extends keyof T>(o: T, name: K): T[K] {\n  return o[name]\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"partial-pick"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#partial-pick"}},[s._v("#")]),s._v(" Partial & Pick")]),s._v(" "),e("p",[s._v("既然了解了 keyof，可以使用它对属性做一些扩展， 如实现 Partial 和 Pick，Pick 一般用在 _.pick 中")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('type Partial<T> = {\n  [P in keyof T]?: T[P];\n};\n\ntype Pick<T, K extends keyof T> = {\n  [P in K]: T[P];\n};\n\ninterface User {\n  id: number;\n  age: number;\n  name: string;\n};\n// 相当于: type PartialUser = { id?: number; age?: number; name?: string; }\ntype PartialUser = Partial<User>\n\n// 相当于: type PickUser = { id: number; age: number; }\ntype PickUser = Pick<User, "id" | "age">\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("h2",{attrs:{id:"condition-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#condition-type"}},[s._v("#")]),s._v(" Condition Type")]),s._v(" "),e("p",[s._v("类似于 js 中的 ?: 运算符，可以使用它扩展一些基本类型")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("T extends U ? X : Y\ntype isTrue<T> = T extends true ? true : false\n// 相当于 type t = false\ntype t = isTrue<number>\n\n// 相当于 type t = false\ntype t1 = isTrue<false>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"never-exclude-omit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#never-exclude-omit"}},[s._v("#")]),s._v(" never & Exclude & Omit")]),s._v(" "),e("p",[s._v("结合 never 与 conditional type 可以推出很多有意思而且实用的类型，比如 Omit")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("type Exclude<T, U> = T extends U ? never : T;\n// 相当于: type A = 'a'\ntype A = Exclude<'x' | 'a', 'x' | 'y' | 'z'>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("结合 Exclude 可以推出 Omit 的写法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('type Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n\ninterface User {\n  id: number;\n  age: number;\n  name: string;\n};\n\n// 相当于: type PickUser = { age: number; name: string; }\ntype OmitUser = Omit<User, "id">\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("h2",{attrs:{id:"typeof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[s._v("#")]),s._v(" typeof")]),s._v(" "),e("p",[s._v("顾名思义，typeof 代表取某个值的 type，可以从以下示例来展示他们的用法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const a: number = 3\n\n// 相当于: const b: number = 4\nconst b: typeof a = 4\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("在一个典型的服务端项目中，我们经常需要把一些工具塞到 context 中，如 config，logger，db models, utils 等，此时就使用到 typeof。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import logger from './logger'\nimport utils from './utils'\n\ninterface Context extends KoaContect {\n  logger: typeof logger,\n  utils: typeof utils\n}\n\napp.use((ctx: Context) => {\n  ctx.logger.info('hello, world')\n\n  // 会报错，因为 logger.ts 中没有暴露此方法，可以最大限度的避免拼写错误\n  ctx.loger.info('hello, world')\n})\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("h2",{attrs:{id:"is"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#is"}},[s._v("#")]),s._v(" is")]),s._v(" "),e("p",[s._v("在此之前，先看一个 koa 的错误处理流程，以下是对 error 进行集中处理，并且标识 code 的过程")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("app.use(async (ctx, next) => {\n  try {\n    await next();\n  } catch (err) {\n    let code = 'BAD_REQUEST'\n    if (err.isAxiosError) {\n      code = `Axios-${err.code}`\n    } else if (err instanceof Sequelize.BaseError) {\n\n    }\n    ctx.body = {\n      code\n    }\n  }\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("在 err.code 处，会编译出错，提示 Property 'code' does not exist on type 'Error'.ts(2339)。")]),s._v(" "),e("p",[s._v("此时可以使用 as AxiosError 或者 as any 来避免报错，不过强制类型转换也不够友好")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if ((err as AxiosError).isAxiosError) {\n  code = `Axios-${(err as AxiosError).code}`\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("此时可以使用 is 来判定值的类型")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function isAxiosError (error: any): error is AxiosError {\n  return error.isAxiosError\n}\n\nif (isAxiosError(err)) {\n  code = `Axios-${err.code}`\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"interface-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#interface-type"}},[s._v("#")]),s._v(" interface & type")]),s._v(" "),e("p",[s._v("interface 与 type 的区别是什么？可以参考以下 stackoverflow 的问题\n"),e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/37233735/typescript-interfaces-vs-types",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/37233735/typescript-interfaces-vs-types"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("一般来说，interface 与 type 区别很小，比如以下两种写法差不多")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("interface A {\n  a: number;\n  b: number;\n};\n\ntype B {\n  a: number;\n  b: number;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("其中 interface 可以如下合并多个，而 type 只能使用 & 类进行连接")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("interface A {\n    a: number;\n}\n\ninterface A {\n    b: number;\n}\n\nconst a: A = {\n    a: 3,\n    b: 4\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("h2",{attrs:{id:"dictionary-many"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dictionary-many"}},[s._v("#")]),s._v(" Dictionary & Many")]),s._v(" "),e("p",[s._v("这几个语法糖是从 lodash 的 types 源码中学到的，平时工作中的使用频率还挺高。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("interface Dictionary<T> {\n  [index: string]: T;\n};\n\ninterface NumericDictionary<T> {\n  [index: number]: T;\n};\n\nconst data:Dictionary<number> = {\n  a: 3,\n  b: 4\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("h2",{attrs:{id:"使用-const-enum-维护常量表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-const-enum-维护常量表"}},[s._v("#")]),s._v(" 使用 const enum 维护常量表")]),s._v(" "),e("p",[s._v("相比使用字面量对象维护常量，const enum 可以提供更安全的类型检查")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 使用 object 维护常量\nconst enum TODO_STATUS {\n    TODO = 'TODO',\n    DONE = 'DONE',\n    DOING = 'DOING'\n}\n\nfunction todos (status:keyof typeof TODO_STATUS): string｛\n    return TODO_STATUS[status as keyof typeof TODO_STATUS]\n｝\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("h2",{attrs:{id:"typescript-高级类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript-高级类型"}},[s._v("#")]),s._v(" Typescript 高级类型")]),s._v(" "),e("h3",{attrs:{id:"record"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#record"}},[s._v("#")]),s._v(" Record")]),s._v(" "),e("ul",[e("li",[s._v("Record<K,T>构造具有给定类型 T 的一组属性 K 的类型。在将一个类型的属性映射到另一个类型的属性时，Record 非常方便。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' // 他会将一个类型的所有属性值都映射到另一个类型上并创造一个新的类型.\n\n interface EmployeeType {\n    id: number\n    fullname: string\n    role: string\n}\n\nlet employees: Record<number, EmployeeType> = {\n    0: { id: 1, fullname: "John Doe", role: "Designer" },\n    1: { id: 2, fullname: "Ibrahima Fall", role: "Developer" },\n    2: { id: 3, fullname: "Sara Duckson", role: "Developer" },\n}\n\n// 0: { id: 1, fullname: "John Doe", role: "Designer" },\n// 1: { id: 2, fullname: "Ibrahima Fall", role: "Developer" },\n// 2: { id: 3, fullname: "Sara Duckson", role: "Developer" }\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("- 源码\n/**\n * Construct a type with a set of properties K of type T\n */\n\ntype Record<K extends keyof any, T> = {\n    [P in K]: T;\n};\n\n好像源码也比较简单，即将K中的每个属性([P in K]),都转为T类型。常用的格式如下：\n\ntype proxyKType = Record<K,T>\n\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("h3",{attrs:{id:"partial-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#partial-type"}},[s._v("#")]),s._v(" Partial<Type>")]),s._v(" "),e("p",[s._v("构造一个 Type 的所有属性都设置为可选的类型。")]),s._v(" "),e("ul",[e("li",[s._v("源码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * Make all properties in T optional.\n * typescript/lib/lib.es5.d.ts\n */\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("ul",[e("li",[s._v("示例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" type User = {\n  name:string;\n  password：string;\n  address：string;\n  phone: string;\n }\n\n // 错误的做法\ntype PartialUser = {\n   name?:string;\n  password?：string;\n  address?：string;\n  phone?: string;\n}\n\n// 正确的做法\n type PartialUser = Partial<User>\n\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("h3",{attrs:{id:"required-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#required-type"}},[s._v("#")]),s._v(" Required <Type>")]),s._v(" "),e("p",[s._v("构造一个类型，该类型由设置为必需的 Type 的所有属性组成，与 Partial 相反。")]),s._v(" "),e("ul",[e("li",[s._v("源码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n/**\n * Make all properties in T required.\n * typescript/lib/lib.es5.d.ts\n */\ntype Required<T> = {\n    [P in keyof T]-?: T[P];\n};\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("ul",[e("li",[s._v("示例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" type User = {\n  name?:string;\n  password?：string;\n  address?：string;\n  phone?: string;\n }\n\n // 错误的做法\ntype RequiredUser = {\n   name:string;\n  password：string;\n  address：string;\n  phone: string;\n}\n\n// 正确的做法\n type RequiredUser = Required<User>\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("h3",{attrs:{id:"readonly-keys-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readonly-keys-type"}},[s._v("#")]),s._v(" Readonly<Keys, Type>")]),s._v(" "),e("p",[s._v("构造一个 Type 的所有属性都设置为只读的类型，这意味着不能重新分配构造类型的属性。")]),s._v(" "),e("ul",[e("li",[s._v("源码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n/**\n * Make all properties in T readonly.\n * typescript/lib/lib.es5.d.ts\n */\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("ul",[e("li",[s._v("示例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" type User = {\n  name:string;\n  password：string;\n  address：string;\n  phone: string;\n }\n\n // 错误的做法\ntype ReadonlyUser = {\n  readonly name:string;\n  readonly password：string;\n  readonly address：string;\n  readonly phone: string;\n}\n\n// 正确的做法\n type ReadonlyUser = Readonly<User>\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("h3",{attrs:{id:"exclude-uniontype-excludedmembers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exclude-uniontype-excludedmembers"}},[s._v("#")]),s._v(" Exclude<UnionType, ExcludedMembers>")]),s._v(" "),e("p",[s._v("通过从 UnionType 中排除所有可分配给 ExcludedMembers 的联合成员来构造一个类型")]),s._v(" "),e("ul",[e("li",[s._v("源码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n/**\n * Exclude from T those types that are assignable to U.\n * typescript/lib/lib.es5.d.ts\n */\ntype Exclude<T, U> = T extends U ? never : T;\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("ul",[e("li",[s._v("示例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('type T0 = Exclude<"a" | "b" | "c", "a">\n// type T0 = "b" | "c"\n\ntype T1 = Exclude<"a" | "b" | "c", "a" | \'b\'>\n // type T1 =  "c"\n\ntype T2 = Exclude<string | number | (()=>void), Function>;\n//  type T2 =string | number\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h3",{attrs:{id:"extract-type-union"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extract-type-union"}},[s._v("#")]),s._v(" Extract<Type, Union>")]),s._v(" "),e("p",[s._v("通过从 Type 中提取可分配给 Union 的所有联合成员来构造一个类型。")]),s._v(" "),e("ul",[e("li",[s._v("源码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * Extract from T those types that are assignable to U.\n * typescript/lib/lib.es5.d.ts\n */\ntype Extract<T, U> = T extends U ? T : never;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("示例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('  type T0 = Extract<"a" | "b" | "c", "a" | "b">\n\n  type T1 = Extract<string | number | (() -> void), Function>\n\n  // type T1 = (() -> void)\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"pick-type-keys"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pick-type-keys"}},[s._v("#")]),s._v(" pick <Type, Keys>")]),s._v(" "),e("p",[s._v("通过从 Type 中选择一组属性键（字符串文字或字符串文字的并集）来构造一个类型。")]),s._v(" "),e("ul",[e("li",[s._v("源码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n/**\n * From T, pick a set of properties whose keys are in the union K.\n * typescript/lib/lib.es5.d.ts\n */\ntype Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n};\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("ul",[e("li",[s._v("示例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('type User = {\n  name: string,\n  password：string\n  address: string\n  phone：string\n}\n\n// 不推荐\ntype PartialUser = {\n  name: string,\n  address\n}\n\n// 推荐的做法\ntype PartialUser = Pick<User,"name" | "adress">\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("h3",{attrs:{id:"omit-type-keys"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#omit-type-keys"}},[s._v("#")]),s._v(" Omit <Type, Keys>")]),s._v(" "),e("p",[s._v("通过从 Type 中选择所有属性然后删除键（字符串文字或字符串文字的并集）来构造一个类型。")]),s._v(" "),e("ul",[e("li",[s._v("源码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n/**\n * Construct a type with the properties of T except for those\n * in type K.\n * typescript/lib/lib.es5.d.ts\n */\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("ul",[e("li",[s._v("示例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('type User = {\n  name:string;\n  password:string;\n  address:string;\n  phone:string;\n}\n\n// 不推荐\nType PartialUser = {\n  name: string,\n  address：string\n}\n\n// 推荐\ntype PartialUser = Omit<User,"password" | "phone">\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("h3",{attrs:{id:"nonnullable-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nonnullable-type"}},[s._v("#")]),s._v(" NonNullable <Type>")]),s._v(" "),e("p",[s._v("通过从 Type 中排除 null 和 undefined 来构造一个类型。")]),s._v(" "),e("ul",[e("li",[s._v("源码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * Exclude null and undefined from T.\n * typescript/lib/lib.es5.d.ts\n */\ntype NonNullable<T> = T extends null | undefined ? never : T;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("示例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("type Value = string | string[] | number | null | boolean\n\n// 不推荐\ntype NonNullableValue = string | string[] | number  | boolean\n\n\n// 推荐\n\ntype NonNullableValue = NonNullable<Value>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h3",{attrs:{id:"parameters-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters-type"}},[s._v("#")]),s._v(" Parameters <Type>")]),s._v(" "),e("p",[s._v("根据函数类型 Type 的参数中使用的类型构造元组类型。")]),s._v(" "),e("ul",[e("li",[s._v("源码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * Obtain the parameters of a function type in a tuple.\n * typescript/lib/lib.es5.d.ts\n */\ntype Parameters<T extends (...args: any) => any> = T extends\n  (...args: infer P) => any ? P : never;\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("ul",[e("li",[s._v("示例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" functuon getUserInfo(id:number, name:string){\n    return `User ID:${id}, User Name:${name}`\n }\n\n type FuncParams = Parameters<typeof getUserInfo>\n // [id:number, name: string]\n\n type FirstParameter = Parameters<typeof getUserInfo>[0]\n // number\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("h3",{attrs:{id:"returntype-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#returntype-type"}},[s._v("#")]),s._v(" ReturnType <Type>")]),s._v(" "),e("p",[s._v("构造一个由函数 Type 的返回类型组成的类型。")]),s._v(" "),e("ul",[e("li",[s._v("源码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * Obtain the return type of a function type.\n * typescript/lib/lib.es5.d.ts\n */\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("示例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" functuon getUserInfo(id:number, name:string){\n    return `User ID:${id}, User Name:${name}`\n }\n\n type FuncReturnType = ReturnType<typeof getUserInfo>\n // [id:number, name: string]\n\n type T0 = ReturnType<(s:string)=>void>\n // type T0 = void\n\n type T1 = ReturnType<any>  // any\n type T2 = ReturnType<nerver>  // never\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("h3",{attrs:{id:"uppercase-stringtype"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uppercase-stringtype"}},[s._v("#")]),s._v(" Uppercase <StringType>")]),s._v(" "),e("p",[s._v("将字符串文字类型转换为大写")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("  type Method = 'get' | 'post' | 'put' | 'delete'\n\n  // 不推荐\n  type UppercaseMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n  // 推荐\n\n  type UppercaseMethod = Uppercase<Method>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h3",{attrs:{id:"lowercase-stringtype"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lowercase-stringtype"}},[s._v("#")]),s._v(" Lowercase <StringType>")]),s._v(" "),e("p",[s._v("将字符串文字类型转换为大写")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("  type Method = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n  // 不推荐\n  type LowercaseMethod = 'get' | 'post' | 'put' | 'delete'\n\n  // 推荐\n  type LowercaseMethod = Lowercase<Method>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h3",{attrs:{id:"capitalize-stringtype"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#capitalize-stringtype"}},[s._v("#")]),s._v(" Capitalize <StringType>")]),s._v(" "),e("p",[s._v("将字符串文字类型的第一个字符转换为大写。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("  type Method = 'get' | 'post' | 'put' | 'delete'\n\n  // 不推荐\n  type CapitalizeMethod = 'Get' | 'Post' | 'Put' | 'Delete'\n\n  // 推荐\n\n  type CapitalizeMethod = Capitalize<Method>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h3",{attrs:{id:"uncapitalize-stringtype"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uncapitalize-stringtype"}},[s._v("#")]),s._v(" Uncapitalize <StringType>")]),s._v(" "),e("p",[s._v("将字符串文字类型的第一个字符转换为小写。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("  type Method = 'Get' | 'Post' | 'Put' | 'Delete'\n\n  // 不推荐\n  type UncapitalizeMethod = 'get' | 'post' | 'put' | 'delete'\n\n  // 推荐\n\n  type UncapitalizeMethod = Uncapitalize<Method>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("除了上面介绍的这些实用类型外，其他常用的 TypeScript 内置实用类型如下：")]),s._v(" "),e("h3",{attrs:{id:"其他内置实用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他内置实用类型"}},[s._v("#")]),s._v(" 其他内置实用类型")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("ConstructorParameters <Type>：根据构造函数类型的类型构造元组或数组类型。它生成一个包含所有参数类型的元组类型（如果 Type 不是函数，则生成 never 类型）。")])]),s._v(" "),e("li",[e("p",[s._v("InstanceType <Type>：构造一个由 Type 中构造函数的实例类型组成的类型。")])]),s._v(" "),e("li",[e("p",[s._v("ThisParameterType <Type>：为函数类型提取此参数的类型，如果函数类型没有此参数，则为未知。")])])]),s._v(" "),e("h2",{attrs:{id:"简述工具类型-exclude、omit、merge、intersection、overwrite-的作用。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简述工具类型-exclude、omit、merge、intersection、overwrite-的作用。"}},[s._v("#")]),s._v(" 简述工具类型 Exclude、Omit、Merge、Intersection、Overwrite 的作用。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Exclude<T, U> 从 T 中排除出可分配给 U的元素。\nOmit<T, K> 的作用是忽略T中的某些属性。\nMerge<O1, O2> 是将两个对象的属性合并。\nCompute<A & B> 是将交叉类型合并\nIntersection<T, U>的作用是取T的属性,此属性同样也存在与U。\nOverwrite<T, U> 是用U的属性覆盖T的相同属性。\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);