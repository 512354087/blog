(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{722:function(s,a,e){"use strict";e.r(a);var n=e(76),r=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[s._v("#")]),s._v(" 数组")]),s._v(" "),a("h3",{attrs:{id:"数组方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组方法"}},[s._v("#")]),s._v(" 数组方法")]),s._v(" "),a("p",[s._v("数组原型方法主要有以下这些")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("join()：用指定的分隔符将数组每一项拼接为字符串\npush() ：向数组的末尾添加新元素\npop()：删除数组的最后一项\nshift()：删除数组的第一项\nunshift()：向数组首位添加新元素\nslice()：按照条件查找出其中的部分元素\nsplice()：对数组进行增删改\nfill(): 方法能使用特定值填充数组中的一个或多个元素\nfilter():“过滤”功能\nconcat()：用于连接两个或多个数组\nindexOf()：检测当前值在数组中第一次出现的位置索引\nlastIndexOf()：检测当前值在数组中最后一次出现的位置索引\nevery()：判断数组中每一项都是否满足条件\nsome()：判断数组中是否存在满足条件的项\nincludes()：判断一个数组是否包含一个指定的值\nsort()：对数组的元素进行排序\nreverse()：对数组进行倒序\nforEach()：ES5 及以下循环遍历数组每一项\nmap()：ES6 循环遍历数组每一项\ncopyWithin():用于从数组的指定位置拷贝元素到数组的另一个指定位置中\nfind():返回匹配的值\nfindIndex():返回匹配位置的索引\ntoLocaleString()、toString():将数组转换为字符串\nflat()、flatMap()：扁平化数组\nentries() 、keys() 、values():遍历数组\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("h3",{attrs:{id:"slice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slice"}},[s._v("#")]),s._v(" slice()")]),s._v(" "),a("p",[s._v("slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。")]),s._v(" "),a("p",[s._v("slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。")]),s._v(" "),a("h3",{attrs:{id:"splice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splice"}},[s._v("#")]),s._v(" splice()")]),s._v(" "),a("p",[s._v("splice()：很强大的数组方法，它有很多种用法，可以实现删除、插入和替换。")]),s._v(" "),a("ul",[a("li",[s._v("1.删除元素,并返回删除的元")]),s._v(" "),a("li",[s._v("2.向指定索引处添加元素")]),s._v(" "),a("li",[s._v("3.替换指定索引位置的元素")])]),s._v(" "),a("h3",{attrs:{id:"reduce"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[s._v("#")]),s._v(" reduce()")]),s._v(" "),a("p",[s._v("定义和用法")]),s._v(" "),a("p",[s._v("reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。\nreduce() 可以作为一个高阶函数，用于函数的 compose。\n注意: reduce() 对于空数组是不会执行回调函数的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("参数\n参数\t描述\nfunction(total,currentValue, index,arr)\t必需。用于执行每个数组元素的函数。\n函数参数:\n参数\t描述\ntotal\t必需。初始值, 或者计算结束后的返回值。\ncurrentValue\t必需。当前元素\ncurrentIndex\t可选。当前元素的索引\narr\t可选。当前元素所属的数组对象。\ninitialValue\t可选。传递给函数的初始值\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[s._v("#")]),s._v(" map()")]),s._v(" "),a("p",[s._v("map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。")]),s._v(" "),a("p",[s._v("map() 方法按照原始数组元素顺序依次处理元素。")]),s._v(" "),a("p",[s._v("该方法不会改变原数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.map(function(item){\n return item*item;\n});\nconsole.log(arr2);  //[1, 4, 9, 16, 25]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[s._v("#")]),s._v(" filter()")]),s._v(" "),a("p",[s._v("filter()：“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arr2 = arr.filter(function(x, index) {\n return index % 3 === 0 || x >= 8;\n});\nconsole.log(arr2);  //[1, 4, 7, 8, 9, 10]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"every"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#every"}},[s._v("#")]),s._v(" every()")]),s._v(" "),a("p",[s._v("every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回 true。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.every(function(x) {\n return x < 10;\n});\nconsole.log(arr2);  //true\nvar arr3 = arr.every(function(x) {\n return x < 3;\n});\nconsole.log(arr3);  // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"some"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#some"}},[s._v("#")]),s._v(" some()")]),s._v(" "),a("p",[s._v("some()：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回 true。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.some(function(x) {\n return x < 3;\n});\nconsole.log(arr2);  //true\nvar arr3 = arr.some(function(x) {\n return x < 1;\n});\nconsole.log(arr3);  // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"includes-es7-新增"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#includes-es7-新增"}},[s._v("#")]),s._v(" includes() es7 新增")]),s._v(" "),a("p",[s._v("includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则 false。")]),s._v(" "),a("p",[s._v("参数有两个，其中第一个是（必填）需要查找的元素值，第二个是（可选）开始查找元素的位置")]),s._v(" "),a("p",[s._v("const array1 = [22, 3, 31, 12, 'arr'];\nconst includes = array1.includes(31);\nconsole.log(includes); // true")]),s._v(" "),a("p",[s._v("const includes1 = array1.includes(31, 3); // 从索引 3 开始查找 31 是否存在\nconsole.log(includes1); // false")]),s._v(" "),a("p",[s._v("需要注意的是：includes 使用===运算符来进行值比较，仅有一个例外：NaN 被认为与自身相等。")]),s._v(" "),a("p",[s._v("let values = [1, NaN, 2];\nconsole.log(values.indexOf(NaN));//-1\nconsole.log(values.includes(NaN));//true")]),s._v(" "),a("h3",{attrs:{id:"reduce-和-reduceright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reduce-和-reduceright"}},[s._v("#")]),s._v(" reduce()和 reduceRight()")]),s._v(" "),a("p",[s._v("这两个方法都会实现迭代数组的所有项(即累加器)，然后构建一个最终返回的值。")]),s._v(" "),a("p",[s._v("reduce()方法从数组的第一项开始，逐个遍历到最后。")]),s._v(" "),a("p",[s._v("reduceRight()则从数组的最后一项开始，向前遍历到第一项。")]),s._v(" "),a("p",[s._v("4 个参数：前一个值、当前值、项的索引和数组对象")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var values = [1,2,3,4,5];\nvar sum = values.reduceRight(function(prev, cur, index, array){\nreturn prev + cur;\n},10);   //数组一开始加了一个初始值10,可以不设默认0\nconsole.log(sum);  //25\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"entries-keys-和-values-【es6】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entries-keys-和-values-【es6】"}},[s._v("#")]),s._v(" entries(),keys() 和 values() 【ES6】")]),s._v(" "),a("p",[s._v("entries()，keys()和 values() —— 用于遍历数组。它们都返回一个遍历器对象，可以用 for...of 循环进行遍历")]),s._v(" "),a("p",[s._v("区别是 keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("如果不使用 for...of 循环，可以手动调用遍历器对象的 next 方法，进行遍历。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let letter = ['a', 'b', 'c'];\nlet entries = letter.entries();\nconsole.log(entries.next().value); // [0, 'a']\nconsole.log(entries.next().value); // [1, 'b']\nconsole.log(entries.next().value); // [2, 'c']\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"树结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树结构"}},[s._v("#")]),s._v(" 树结构")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"foreach到底可以改变原数组吗？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreach到底可以改变原数组吗？"}},[s._v("#")]),s._v(" forEach到底可以改变原数组吗？")]),s._v(" "),a("p",[s._v("基本数据类型 -> 死都改不动原数组！")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  const array = [1, 2, 3, 4];\n  array.forEach(ele => {\n  ele = ele * 3\n  })\n  console.log(array); // [1,2,3,4]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("引用类型 -> 类似对象数组可以爽快改变偶~")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const objArr = [{\n    name: 'wxw',\n    age: 22\n}, {\n    name: 'wxw2',\n    age: 33\n}]\nobjArr.forEach(ele => {\n    if (ele.name === 'wxw2') {\n        ele.age = 88\n    }\n})\nconsole.log(objArr); // [{name: \"wxw\", age: 22},{name: \"wxw2\", age: 88}]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("那引用类型 -> 改变整个单次循环的item那？ -> NO！不行")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const changeItemArr = [{\n    name: 'wxw',\n    age: 22\n}, {\n    name: 'wxw2',\n    age: 33\n}]\nchangeItemArr.forEach(ele => {\n    if (ele.name === 'wxw2') {\n        ele = {\n            name: 'change',\n            age: 77\n        }\n    }\n})\nconsole.log(changeItemArr); // [{name: \"wxw\", age: 22},{name: \"wxw2\", age: 33}]\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("总结")]),s._v(" "),a("p",[s._v("基本类型我们当次循环拿到的ele，只是forEach给我们在另一个地方复制创建新元素，是和原数组这个元素没有半毛钱联系的！所以，我们使命给循环拿到的ele赋值都是无用功！\n专业的概念说就是：JavaScript是有基本数据类型与引用数据类型之分的。对于基本数据类型：number,string,Boolean,null,undefined它们在栈内存中直接存储变量与值。而Object对象的真正的数据是保存在堆内存，栈内只保存了对象的变量以及对应的堆的地址，所以操作Object其实就是直接操作了原数组对象本身。\nforEach 的基本原理也是for循环，使用arr[index]的形式赋值改变，无论什么就都可以改变了。")])])}),[],!1,null,null,null);a.default=r.exports}}]);